// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProjectPractic.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ForgotPassword")]
    [NUnit.Framework.CategoryAttribute("Test")]
    public partial class ForgotPasswordFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Test"};
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ForgotPassword", "\tIn order to restore access to MyAccount\r\n\tAs a client\r\n\tI want to charge passwor" +
                    "d using email", ProgrammingLanguage.CSharp, new string[] {
                        "Test"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is possible to charge password using Forgot Password function in MyAccount")]
        [NUnit.Framework.CategoryAttribute("mytag1")]
        public virtual void ItIsPossibleToChargePasswordUsingForgotPasswordFunctionInMyAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is possible to charge password using Forgot Password function in MyAccount", null, tagsOfScenario, argumentsOfScenario);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table1.AddRow(new string[] {
                            "testfeature@mail.com",
                            "123qwe"});
#line 9
 testRunner.Given("Client exist with parameters", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.And("Forgot password open in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Body email Template",
                            "Subject",
                            "Type"});
                table2.AddRow(new string[] {
                            "Привет! Вот твоя линка \'link\'",
                            "Забыл пароль",
                            "Forgot password"});
#line 13
 testRunner.And("Email template exists with parameters", ((string)(null)), table2, "And ");
#line hidden
#line 16
 testRunner.When("I sent request to Forgot Password  with \'testfeature@mail.com\' email on Forgot Pa" +
                        "ssword page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.And("I follow by \"link\" in email with \'Забыл пароль\' subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("I change password on Reset Password page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("I follow by \"link\" in email with \'Забыл пароль\' subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "New Password",
                            "Confirm New Password"});
                table3.AddRow(new string[] {
                            "qwe123",
                            "qwe123"});
#line 20
 testRunner.And("I set new password on Reset Password page in MyAccount", ((string)(null)), table3, "And ");
#line hidden
#line 23
 testRunner.And("I click \'Change\' button on Reset Password page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table4.AddRow(new string[] {
                            "testfeature@mail.com",
                            "qwe123"});
#line 24
 testRunner.And("I set data on MyAccount login page", ((string)(null)), table4, "And ");
#line hidden
#line 27
 testRunner.And("l click \'button\' on MyAccount login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.Then("Client was successful authorization with \'qwe123\' password in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Displayed exeption message if using Forgot Password function to charge password i" +
            "n MyAccount if input invalid data")]
        [NUnit.Framework.CategoryAttribute("mytag1")]
        [NUnit.Framework.TestCaseAttribute("123qwe", "123qw", "Password missmatch", null)]
        [NUnit.Framework.TestCaseAttribute("123qwe", "", "Field cannot be empty", null)]
        [NUnit.Framework.TestCaseAttribute("", "123qwe", "Field cannot be empty", null)]
        [NUnit.Framework.TestCaseAttribute("123qwe", "123qwe", "New password must not be the same as the old one", null)]
        public virtual void DisplayedExeptionMessageIfUsingForgotPasswordFunctionToChargePasswordInMyAccountIfInputInvalidData(string new_Password, string confirm_New_Password, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("new_password", new_Password);
            argumentsOfScenario.Add("confirm_new_password", confirm_New_Password);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Displayed exeption message if using Forgot Password function to charge password i" +
                    "n MyAccount if input invalid data", null, tagsOfScenario, argumentsOfScenario);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table5.AddRow(new string[] {
                            "testfeature@mail.com",
                            "123qwe"});
#line 32
 testRunner.Given("Client exist with parameters", ((string)(null)), table5, "Given ");
#line hidden
#line 35
 testRunner.And("Forgot password open in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Body email Template",
                            "Subject",
                            "Type"});
                table6.AddRow(new string[] {
                            "Привет! Вот твоя линка <link>",
                            "Забыл пароль",
                            "Forgot password"});
#line 36
 testRunner.And("Email template exists with parameters", ((string)(null)), table6, "And ");
#line hidden
#line 39
 testRunner.When("I sent request to Forgot Password  with \'testfeature@mail.com\' email on Forgot Pa" +
                        "ssword page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.And("I follow by \"link\" in email with \'Забыл пароль\' subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("I change password on Reset Password page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("I follow by \"link\" in email with \'Забыл пароль\' subject", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "New Password",
                            "Confirm New Password"});
                table7.AddRow(new string[] {
                            "<New Password>",
                            "<Confirm New Password>"});
#line 43
 testRunner.And("I set new password on Reset Password page in MyAccount", ((string)(null)), table7, "And ");
#line hidden
#line 46
 testRunner.And("I click \'Change\' button on Reset Password page in MyAccount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then(string.Format("Displayed exeption message: {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
